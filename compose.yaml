
name: sunet-wallet-test

services:

  # =========================================================================
  # Production reverse proxy + cert handling
  # =========================================================================

  nginx:
    container_name: wallet-nginx
    image: nginx:alpine
    depends_on:
      frontend:
        condition: service_started
      backend-server:
        condition: service_started
      certbot:
        condition: service_started
    env_file:
      - ./reverse-proxy/.env
    volumes:
      - ./reverse-proxy/nginx/templates:/templates:ro
      - ./reverse-proxy/nginx/log/:/var/log/
      - ./reverse-proxy/nginx/40-generate-conf.sh:/docker-entrypoint.d/40-generate-conf.sh:ro
      - ./reverse-proxy/nginx/99-crontab.sh:/docker-entrypoint.d/99-crontab.sh:ro
      - ./reverse-proxy/certbot/letsencrypt:/etc/letsencrypt:ro
      - ./reverse-proxy/certbot/www:/var/www/certbot
    ports:
      - 80:80
      - 443:443
    networks:
      - wallet_net
      - public_net
    profiles:
      - prod

  certbot:
    image: certbot/certbot:latest
    container_name: wallet-certbot
    env_file:
      - ./reverse-proxy/.env
    volumes:
      - ./reverse-proxy/certbot/letsencrypt:/etc/letsencrypt
      - ./reverse-proxy/certbot/www:/var/www/certbot
      - ./reverse-proxy/certbot/log/:/var/log/
      - ./reverse-proxy/certbot/entrypoint.sh:/entrypoint.sh
    entrypoint: "sh /entrypoint.sh"
    profiles:
      - prod


  # =========================================================================
  # Wallet 
  # =========================================================================

  frontend:
    container_name: wallet-frontend
    build:
      context: apps/wallet-frontend
      dockerfile: Dockerfile
    restart: on-failure
    ports:
      - 127.0.0.1:3000:80
    networks:
      - wallet_net
      - public_net

  backend-server:
    container_name: wallet-backend-server
    build:
      context: apps/wallet-backend-server
      dockerfile: Dockerfile
    restart: on-failure
    depends_on:
      backend-db:
        condition: service_healthy
    volumes:
      - ./apps-config/wallet-backend-server/config/index.js:/app/dist/config/index.js
      - ./apps/wallet-ecosystem/wallet-enterprise-configurations/issuer/keys/pem.key:/app/keys/wallet-provider.key
      - ./apps/wallet-ecosystem/wallet-enterprise-configurations/issuer/keys/pem.crt:/app/keys/wallet-provider.pem
      - ./apps/wallet-ecosystem/wallet-enterprise-configurations/issuer/keys/ca.crt:/app/keys/ca.pem
    ports:
      - 127.0.0.1:8002:8002
    networks:
      - public_net
      - wallet_net

  backend-db:
    image: mariadb:latest
    container_name: wallet-backend-db
    restart: on-failure
    environment:
      MARIADB_HOST: wallet-backend-db
      MARIADB_ROOT_PASSWORD: root
      MARIADB_DATABASE: wallet
      MARIADB_USER: wallet
      MARIADB_PASSWORD: wallet
    healthcheck:
      test: ["CMD", "mariadb" ,"-uroot", "-proot", "--protocol=TCP", "-hlocalhost", "--port=3306",  "-estatus"]
      start_period: 30s
      interval: 5s
      timeout: 2s
    volumes:
      - backend-db:/var/lib/mysql
    networks:
      - wallet_net


  # =========================================================================
  # Issuer
  # =========================================================================

  issuer:
    container_name: demo-issuer
    build:
      context: apps/wallet-ecosystem
      dockerfile: wallet-enterprise-configurations/issuer/Dockerfile
    depends_on:
      issuer-db:
        condition: service_healthy
    restart: on-failure
    volumes:
      - ./apps/wallet-ecosystem/wallet-enterprise-configurations/issuer/dataset:/app/dataset:rw
      - ./apps/wallet-ecosystem/wallet-enterprise-configurations/issuer/keys:/app/keys:rw
      - ./apps-config/issuer/config/index.js:/app/dist/config/index.js
    ports:
      - 127.0.0.1:8003:8003
    networks:
      - issuer_net
      - public_net

  issuer-db:
    image: mariadb:latest
    container_name: demo-issuer-db
    restart: on-failure
    environment:
      MARIADB_HOST: demo-issuer-db
      MARIADB_ROOT_PASSWORD: root
      MARIADB_DATABASE: issuer
      MARIADB_USER: issuer
      MARIADB_PASSWORD: issuer
    healthcheck:
      test: ["CMD", "mariadb" ,"-uroot", "-proot", "--protocol=TCP", "-hlocalhost", "--port=3306",  "-estatus"]
      start_period: 30s
      interval: 5s
      timeout: 2s
    volumes:
      - issuer-db:/var/lib/mysql
    networks:
      - issuer_net

  # =========================================================================
  # Verifier
  # =========================================================================

  verifier:
    container_name: demo-verifier
    build:
      context: apps/wallet-ecosystem
      dockerfile: wallet-enterprise-configurations/acme-verifier/Dockerfile
    depends_on:
      verifier-db:
        condition: service_healthy
    restart: on-failure
    volumes:
      - ./apps/wallet-ecosystem/wallet-enterprise-configurations/acme-verifier/dataset:/app/dataset:rw
      - ./apps/wallet-ecosystem/wallet-enterprise-configurations/acme-verifier/keys:/app/keys:rw
      - ./apps-config/verifier/config/index.js:/app/dist/config/index.js
    ports:
      - 127.0.0.1:8004:8004
    networks:
      - verifier_net
      - public_net

  verifier-db:
    image: mariadb:latest
    container_name: demo-verifier-db
    restart: on-failure
    environment:
      MARIADB_HOST: demo-verifier-db
      MARIADB_ROOT_PASSWORD: root
      MARIADB_DATABASE: verifier
      MARIADB_USER: verifier
      MARIADB_PASSWORD: verifier
    healthcheck:
      test: ["CMD", "mariadb" ,"-uroot", "-proot", "--protocol=TCP", "-hlocalhost", "--port=3306",  "-estatus"]
      start_period: 30s
      interval: 5s
      timeout: 2s
    volumes:
      - verifier-db:/var/lib/mysql
    networks:
      - verifier_net


  # =========================================================================
  # Debug
  # =========================================================================
  phpmyadmin:
    container_name: debug-phpmyadmin
    image: phpmyadmin:latest
    restart: always
    ports:
      - 8080:80
    environment:
      PMA_ARBITRARY: 1
    networks:
      - wallet_net
      - issuer_net
      - verifier_net
      - public_net
    profiles: 
      - debug

volumes:
  backend-db:
  issuer-db:
  verifier-db:

networks:
  public_net:
    internal: false
  wallet_net:
    driver: bridge
  issuer_net:
    driver: bridge
  verifier_net:
    driver: bridge